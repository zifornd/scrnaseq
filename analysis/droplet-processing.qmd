---
title: "Single Cell Gene Expression"
subtitle: "Droplet processing"
author: "Zifo RnD Solutions"
date: "`r format(Sys.time(), '%d %B, %Y')`"
params:
    lower: 100
    niters: 10000
    fdr: 0.001
execute:
  message: false
  warning: false
  echo: false
---

<!-- Include big data processing -->

```{r}
#| child: analysis/big-data.qmd
```

<!-- Load Bioconductor package(s) -->

```{r}
library(DropletUtils)
```

<!-- Load CRAN package(s) -->

```{r}
library(patchwork)
```

<!-- Source helper function(s) -->

```{r}
source("R/droplet-processing/barcodeRanksData.R")

source("R/droplet-processing/barcodeRanksPlot.R")

source("R/droplet-processing/emptyDropsData.R")

source("R/droplet-processing/emptyDropsFDR.R")

source("R/droplet-processing/emptyDropsLimited.R")

source("R/droplet-processing/emptyDropsLogProb.R")

source("R/droplet-processing/emptyDropsPValue.R")

source("R/droplet-processing/emptyDropsRank.R")

source("R/droplet-processing/emptyDropsTable.R")
```

<!-- Set custom theme -->

```{r}
source("R/custom_theme.R")

ggplot2::theme_set(custom_theme())
```

<!-- Read experiment object(s) -->

```{r}
sce <- readRDS("output/data-loading.rds")
```

## Barcode ranks

<!-- Compute barcode rank statistics -->

```{r}
bcr <- bplapply(sce, barcodeRanks, lower = params$lower)
```

<!-- Plot barcode rank statistics -->

```{r}
out <- lapply(bcr, barcodeRanksPlot, lower = params$lower)

patchwork::wrap_plots(out, ncol = 2)
```

<!-- Add barcode rank statistics to column data -->

```{r}
sce <- bpmapply(barcodeRanksData, x = sce, y = bcr)
```

## Empty droplets

<!-- Identify empty droplets -->

```{r}
fit <- bplapply(sce, emptyDrops, lower = params$lower, niters = params$niters)
```

<!-- Identify empty droplets with ambient testing -->

```{r}
amb <- bplapply(sce, emptyDrops, lower = params$lower, niters = params$niters, test.ambient = TRUE)
```

The table below shows the number of droplets containing cells identified by the emptyDrops algorithm using a `r params$fdr` FDR threshold.

```{r}
dat <- emptyDropsTable(fit)

knitr::kable(dat)
```

The table below shows how many droplets were limited by the number of iterations used for the Monte Carlo p-value calculations by the emptyDrops algorithm.

```{r}
dat <- emptyDropsLimited(fit)

knitr::kable(dat)
```

::: {.panel-tabset}

### LogProb

<!-- Plot droplet log probability -->

```{r}
out <- lapply(fit, emptyDropsLogProb, FDR = params$fdr)

patchwork::wrap_plots(out, ncol = 2)
```

### Rank

<!-- Plot droplet rank -->

```{r}
out <- lapply(fit, emptyDropsRank, FDR = params$fdr)

patchwork::wrap_plots(out, ncol = 2)
```

### PValue

<!-- Plot ambient P value -->

```{r}
out <- lapply(amb, emptyDropsPValue, lower = params$lower)

patchwork::wrap_plots(out, ncol = 2)
```

:::

<!-- Add empty droplet statistics to column data -->

```{r}
sce <- bpmapply(emptyDropsData, x = sce, y = fit)
```

<!-- Filter droplets by FDR threshold -->

```{r}
sce <- bplapply(sce, emptyDropsFDR, FDR = params$fdr)
```

<!-- Save experiment object(s) -->

```{r}
saveRDS(sce, file = "output/droplet-processing.rds")
```

## Summary

### Parameters

This table shows the parameters used to process the data.

```{r}
par <- list(
  list(
    Parameter = "lower",
    Value = params$lower,
    Description = "A numeric scalar specifying the lower bound on the total UMI count, at or below which all barcodes are assumed to correspond to empty droplets."
  ),
  list(
    Parameter = "niters",
    Value = params$niters,
    Description = "An integer scalar specifying the number of iterations to use for the Monte Carlo p-value calculations."
  ),
  list(
    Parameter = "fdr",
    Value = params$fdr,
    Description = "Barcode FDR threshold"
  )
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

### Output files

This table provides links to the processed output files.

```{r}
out <- list(
  list(
    File = "droplet-processing.rds",
    Description = "A list of SingleCellExperiment objects."
  )
)

out <- jsonlite::toJSON(out, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(out))
```

### Session information

This output lists version information about R, the OS and attached or loaded packages.

```{r}
sessionInfo()
```
