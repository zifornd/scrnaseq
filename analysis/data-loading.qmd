---
title: "Data loading"
description: "Report"
params:
  samples: "data/samples.tsv"
  annotation: "EnsDb.Hsapiens.v86"
execute:
  message: false
  warning: false
  echo: false
---

## Introduction

This section of the report lists the sample annotation table. Blah blah blah.

```{r}
# Load Bioconductor package(s)

library(DropletUtils)

library(batchelor)
library(scuttle)
```

```{r}
# Load CRAN package(s)

library(DT)
library(skimr)
```

```{r}
# Load gene annotation object

library(params$annotation, character.only = TRUE)

ann <- eval(parse(text = params$annotation))
```

## Sample metadata

:::{.callout-important}
Please check the sample annotation table is correct.
:::

```{r}
# Read sample annotation table

tab <- read.delim(params$samples)
```

```{r}
# Display sample annotation table

#| label: fig-samples
#| fig-cap: Sample annotation table.

datatable(tab)
```

:::{.callout-important}
Please check the sample summary statistics are appropriate.
:::

```{r}
# Summarize sample annotation table

#| label: fig-summary
#| fig-cap: Sample summary table

skim(tab, .data_name = "Sample annotation table")
```

```{r}
# Load data from experiment(s)

sce <- read10xCounts(tab$sample, sample.names = tab$sample.name)
```

```{r}
# Display droplet count table

#| label: fig-cells
#| fig-cap: Droplet count table.

tab <- table(sce$Sample)

tab <- as.data.frame(tab)

datatable(tab, colnames = c("Sample" = "Var1", "Count" = "Freq"))
```

```{r}
# Make feature names unique

rownames(sce) <- uniquifyFeatureNames(
  ID = rowData(sce)$ID,
  names = rowData(sce)$Symbol
)
```

```{r}
# Get the chromosome name

rowData(sce)$Chrom <- mapIds(
  x = ann,
  keys = rowData(sce)$ID,
  column = "SEQNAME",
  keytype = "GENEID"
)
```

## Feature metadata

The feature annotation table was retrieved from the `r params$annotation` package.

:::{.callout-important}
Please check the feature data is appropriate for the experiment.
:::

```{r}
# Display feature annotation metadata

tab <- c(
  Package  = params$annotation,
  Genome   = unique(genome(ann)),
  Organism = organism(ann),
  Provider = seqlevelsStyle(ann)
)

tab <- as.data.frame(tab)

datatable(
  data = tab, 
  options = list(
    dom = "t", 
    ordering = FALSE,
    searching = FALSE
  ), 
  colnames = ""
)
```

```{r}
# Divide experiment object into batches

sce <- divideIntoBatches(sce, sce$Sample)$batches
```

```{r}
# Save experiment object(s)

saveRDS(sce, file = "output/data-loading.rds")
```
