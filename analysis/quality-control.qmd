---
title: "Single Cell Gene Expression"
subtitle: "Quality control"
author: "Zifo RnD Solutions"
date: "`r format(Sys.time(), '%d %B, %Y')`"
params:
  nmads: 3
  mito: "^MT-"
  ribo: "^RP[SL]\\d+"
execute:
  message: false
  warning: false
  echo: false
---

<!-- Include big data processing -->

```{r}
#| child: "analysis/big-data.qmd"
```

<!-- Load Bioconductor package(s) -->

```{r}
library(scater)
library(scuttle)
```

<!-- Load CRAN package(s) -->

```{r}
library(ggforce)
library(ggplot2)
library(scales)
```

<!-- Source helper function(s) -->

```{r}
source("R/quality-control/addPerCellQCFilters.R")
source("R/quality-control/panelTabset.R")
source("R/quality-control/plotPerCellQCMetrics.R")
```

<!-- Read experiment object(s) -->

```{r}
sce <- readRDS("output/droplet-processing.rds")
```

<!-- Get indices of MT and RP features -->

```{r}
ind <- lapply(sce, function(x) {
  list(
    mt = grep(params$mito, rowData(x)$Symbol),
    rp = grep(params$ribo, rowData(x)$Symbol)
  )
})
```

<!-- Add QC metrics to experiment object(s) -->

```{r}
sce <- mapply(addPerCellQCMetrics, x = sce, subsets = ind, SIMPLIFY = FALSE)
```

<!-- Add QC filters to experiment object(s) -->

```{r}
sce <- mapply(addPerCellQCFilters, x = sce, sub.fields = "subsets_mt_percent", SIMPLIFY = FALSE)
```

## Quality metrics

### Within-sample

::: {.panel-tabset}

```{r}
#| results: "asis"
#| fig.align: "center"
#| fig.height: 20

panelTabset(sce, plotPerCellQCMetrics, level = "####")
```

:::

### Between-sample

<!-- Create per-cell data frame -->

```{r}
dat <- lapply(sce, makePerCellDF)

dat <- do.call(rbind, dat)
```

@tbl-quality-summary Displays a cross table of summary statistics for each sample.

```{r}
#| label: tbl-quality-summary
#| tbl-cap: "Quality summary"

tbl <- data.frame(Sample = dat$Sample, Quality = ifelse(dat$discard, "Low", "High"))

tbl <- gtsummary::tbl_cross(tbl, row = Sample, col = Quality, percent = "row")

tbl <- gtsummary::bold_labels(tbl)

tbl
```

#### Total counts

@fig-total-counts displays the distribution of the per-cell counts for each sample coloured by the quality assignment.

```{r}
#| label: fig-total-counts
#| fig-cap: Per-cell counts coloured by quality.

ggplot(dat, aes(x = Sample, y = sum, colour = discard, group = Sample)) +
  geom_sina(scale = "count") +
  scale_colour_manual(
    name = "Quality",
    values = c("TRUE" = "#ef8a62", "FALSE" = "#67a9cf"),
    labels = c("TRUE" = "Low", "FALSE" = "High")
  ) +
  scale_y_log10(labels = label_number(big.mark = ",")) +
  labs(x = "Sample", y = "Counts") +
  theme_minimal()
```

#### Total features

@fig-total-features displays the distribution of the per-cell features for each sample coloured by the quality assignment.

```{r}
#| label: fig-total-features
#| fig-cap: Per-cell features coloured by quality.

ggplot(dat, aes(x = Sample, y = detected, colour = discard, group = Sample)) +
  geom_sina(scale = "count") +
  scale_colour_manual(
    name = "Quality",
    values = c("TRUE" = "#ef8a62", "FALSE" = "#67a9cf"),
    labels = c("TRUE" = "Low", "FALSE" = "High")
  ) +
  scale_y_log10(labels = label_number(big.mark = ",")) +
  labs(x = "Sample", y = "Features") +
  theme_minimal() +
  theme(legend.position = "top")
```

#### Mitochondrial proportion

@fig-mito-prop displays the distribution of the per-cell MT proportion for each sample coloured by the quality assignment.

```{r}
#| label: fig-mito-prop
#| fig-cap: Per-cell MT proportion coloured by quality.

ggplot(dat, aes(x = Sample, y = subsets_mt_percent, colour = discard, group = Sample)) +
  geom_sina(scale = "count") +
  scale_colour_manual(
    name = "Quality",
    values = c("TRUE" = "#ef8a62", "FALSE" = "#67a9cf"),
    labels = c("TRUE" = "Low", "FALSE" = "High")
  ) +
  labs(x = "Sample", y = "MT Proportion") +
  scale_y_continuous(labels = label_percent(scale = 1)) +
  theme_minimal() +
  theme(legend.position = "top")
```

#### Ribosomal proportion

@fig-ribo-prop displays the distribution of the per-cell RP proportion for each sample coloured by the quality assignment.

```{r}
#| label: fig-ribo-prop
#| fig-cap: Per-cell RP proportion coloured by quality.

ggplot(dat, aes(x = Sample, y = subsets_rp_percent, colour = discard, group = Sample)) +
  geom_sina(scale = "count") +
  scale_colour_manual(
    name = "Quality",
    values = c("TRUE" = "#ef8a62", "FALSE" = "#67a9cf"),
    labels = c("TRUE" = "Low", "FALSE" = "High")
  ) +
  labs(x = "Sample", y = "RP Proportion") +
  scale_y_continuous(labels = label_percent(scale = 1)) +
  theme_minimal() +
  theme(legend.position = "top")
```

<!-- Save experiment object(s) -->

```{r}
saveRDS(sce, file = "output/quality-control.rds")
```

## Summary

### Parameters

This table describes the parameters used to process the data.

```{r}
par <- list(
  list(
    Parameter = "nmads",
    Value = params$nmads,
    Description = "A numeric scalar, specifying the minimum number of MADs away from median required for a value to be called an outlier."
  ),
  list(
    Parameter = "mito",
    Value = params$mito,
    Description = "Mitochondrial gene symbol pattern"
  ),
  list(
    Parameter = "ribo",
    Value = params$ribo,
    Description = "Ribosomal gene symbol pattern"
  )
)

par <- jsonlite::toJSON(par, pretty = TRUE)

knitr::kable(jsonlite::fromJSON(par))
```

### Output files

This table provides links to the processed output files.

```{r}
out <- list(
  list(
    File = "droplet-processing.rds",
    Description = "A list of SingleCellExperiment objects."
  )
)
out <- jsonlite::toJSON(out, pretty = TRUE)
knitr::kable(jsonlite::fromJSON(out))
```

### Session information

Version information about R, the OS and attached or loaded packages.

```{r}
sessionInfo()
```
