---
title: "Dimensionality reduction"
params:
  ncomponents: 25
  perplexity: 30
  max_iter: 500
  n_neighbors: 15
  n_epochs: 500
  min_dist: 0.01
---

## Overview

<!-- Include big data settings -->

```{r}
#| child: "big-data.qmd"
```

<!-- Load Bioconductor packages -->

```{r}
library(scater)
library(scuttle)
```

<!-- Load CRAN packages -->

```{r}
library(ggplot2)
library(patchwork)
```

<!-- Source helper functions -->

```{r}
source("R/reduced-dimensions/plotPCA.R")
source("R/reduced-dimensions/plotTSNE.R")
source("R/reduced-dimensions/plotUMAP.R")
```

<!-- Read experiment objects -->

```{r}
sce <- readRDS("output/feature-selection.rds")
```

## Principal components analysis (PCA)

<!-- Extract highly variable genes -->

```{r}
hvg <- lapply(sce, rowSubset, "HVG")
```

<!-- Perform PCA on cells -->

```{r}
sce <- bpmapply(
  FUN = runPCA,
  x = sce,
  ncomponents = params$ncomponents,
  subset_row = hvg,
  SIMPLIFY = FALSE
)
```

<!-- Plot PCA -->

```{r}
plt <- mapply(plotPCA, x = sce, name = names(sce), SIMPLIFY = FALSE)

wrap_plots(plt, ncol = 2)
```

## t-distributed stochastic neighbor embedding (t-SNE)

<!-- Perform t-SNE on cells -->

```{r}
sce <- bplapply(
  X = sce,
  FUN = runTSNE,
  perplexity = params$perplexity,
  max_iter = params$max_iter,
  dimred = "PCA"
)
```

<!-- Plot t-SNE -->

```{r}
plt <- mapply(plotTSNE, x = sce, name = names(sce), SIMPLIFY = FALSE)

wrap_plots(plt, ncol = 2)
```

## Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP)

<!-- Perform UMAP on cells -->

```{r}
sce <- bplapply(
  X = sce,
  FUN = runUMAP,
  n_neighbors = params$n_neighbors,
  n_epochs = params$n_epochs,
  min_dist = params$min_dist,
  dimred = "PCA"
)
```

<!-- Plot UMAP -->

```{r}
plt <- mapply(plotUMAP, x = sce, name = names(sce), SIMPLIFY = FALSE)

wrap_plots(plt, ncol = 2)
```

<!-- Save experiment objects -->

```{r}
saveRDS(sce, file = "output/reduced-dimensions.rds")
```

## Summary

## Output files

```{r}

```

## Parameter values

```{r}
par <- list(
  list(
    Parameter = "ncomponents",
    Value = params$ncomponents,
    Description = "Numeric scalar indicating the number of principal components to obtain."
  ),
  list(
    Parameter = "perplexity",
    Value = params$perplexity,
    Description = "Perplexity parameter."
  ),
  list(
    Parameter = "max_iter",
    Value = params$max_iter,
    Description = "Number of iterations."
  ),
  list(
    Parameter = "n_neighbors",
    Value = params$n_neighbors,
    Description = "The size of local neighborhood (in terms of number of neighboring sample points) used for manifold approximation."
  ),
  list(
    Parameter = "n_epochs",
    Value = params$n_epochs,
    Description = "Number of epochs to use during the optimization of the embedded coordinates."
  ),
  list(
    Parameter = "min_dist",
    Value = params$min_dist,
    Description = "The effective minimum distance between embedded points."
  )
)

par <- jsonlite::toJSON(par, pretty = TRUE)

DT::datatable(jsonlite::fromJSON(par))
```

## Session information

<!-- Print session information -->

```{r}
sessionInfo()
```
