---
title: "Dimensionality reduction"
params:
    perplexity: 30
    max_iter: 500
    n_neighbors: 15
    n_epochs: 500
    min_dist: 0.01
---

```{r}
#| child: "big-data.qmd"
```

Load Bioconductor package(s):

```{r}
library(PCAtools)
library(scuttle)
```

Load CRAN package(s):

```{r}
library(ggplot2)
```

Read experiment object(s):

```{r}
sce <- readRDS("output/feature-selection.rds")
```

## Principal components analysis

Extract highly variable genes:

```{r}
hvg <- lapply(sce, rowSubset, "HVG")
```

Perform a principal components analysis (PCA) on cells:

```{r}
sce <- bpmapply(
  FUN = runPCA,
  x = sce,
  subset_row = hvg,
  SIMPLIFY = FALSE
)
```


## Elbow Point

```{r}
FUN <- function(x) {
  
  dim <- reducedDim(x, "PCA")
  
  var <- attr(dim, "percentVar")

}

out <- lapply(sce, FUN)
```

Find the elbow point in the curve of variance explained by each successive PC:

```{r}
num <- lapply(out, findElbowPoint)
```

```{r}
FUN <- function(v, n) {
  
  df <- data.frame(component = seq_along(v), variance = v)

  ggplot(df, aes(component, variance)) + 
    geom_point() + 
    geom_vline(xintercept = n, colour = "#E41A1C") + 
    scale_y_continuous(labels = label_percent(scale = 1)) + 
    labs(x = "PC", y = "Variance") + 
    theme_classic() + 
    theme(aspect.ratio = 1)

}

plt <- bpmapply(FUN, v = out, n = num, SIMPLIFY = FALSE)

wrap_plots(plt)
```



```{r}
FUN <- function(x, n) {
  
  d <- reducedDim(x, "PCA")
  
  j <- seq_len(n)
  
  d <- d[, j]
  
  reducedDim(x, "PCA") <- d
  
  x

}

sce <- bpmapply(FUN, x = sce, n = num, SIMPLIFY = FALSE)

```

```{r}
plotPCA <- function(n) {
  
  ggcells(sce[[n]], aes(PCA.1, PCA.2)) + 
    geom_point() + 
    coord_fixed() + 
    labs(x = "PCA 1", y = "PCA 2", title = n) + 
    theme_no_axes() + 
    theme(axis.title = element_text())
  
}

plt <- lapply(names(sce), plotPCA)

wrap_plots(plt)
```

## t-stochastic neighbor embedding

```{r}
sce <- bplapply(
  X = sce,
  FUN = runTSNE,
  perplexity = params$perplexity,
  max_iter = params$max_iter,
  dimred = "PCA"
)
```

```{r}
plotTSNE <- function(n) {
  
  ggcells(sce[[n]], aes(TSNE.1, TSNE.2)) + 
    geom_point() + 
    labs(x = "TSNE 1", y = "TSNE 2", title = n) + 
    theme_no_axes() + 
    theme(aspect.ratio = 1) + 
    theme(axis.title = element_text())
  
}

plt <- lapply(names(sce), plotTSNE)

wrap_plots(plt)
```

## Uniform manifold approximation and projection

```{r}
sce <- bplapply(
  X = sce,
  FUN = runUMAP,
  n_neighbors = params$n_neighbors,
  n_epochs = params$n_epochs,
  min_dist = params$min_dist,
  dimred = "PCA"
)
```

```{r}
plotUMAP <- function(n) {
  
  ggcells(sce[[n]], aes(UMAP.1, UMAP.2)) + 
    geom_point() + 
    labs(x = "UMAP 1", y = "UMAP 2", title = n) + 
    theme_no_axes() + 
    theme(aspect.ratio = 1) + 
    theme(axis.title = element_text())
  
}

plt <- lapply(names(sce), plotUMAP)

wrap_plots(plt)
```

Save experiment object(s):

```{r}
saveRDS(sce, file = "output/reduced-dimensions.rds")
```

Print session information

```{r}
sessionInfo()
```
